### 题目

leetcode上面第一题[两数之和](https://leetcode-cn.com/problems/two-sum/)可谓是点击简单排序第一题,英语单词的abandoned，暴力枚举就可以过，但是谁不想写个跑的飞快的代码捏，就粗略看了一下那些几毫秒就过的大佬的代码，就有了这篇博客

```
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。

你可以按任意顺序返回答案。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/two-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
```

***

### 解答来源

B站up [**英雄哪里出来**](https://space.bilibili.com/319521269) 的视频 [**如何不断优化你的代码效率**](https://www.bilibili.com/video/BV1LZ4y167Us/?spm_id_from=333.788) 以及[**leetcode题解**](https://leetcode-cn.com/submissions/detail/300893887/)

***

### 代码

```c++
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map <int ,int> has;
        int n = nums.size();
        for(int i =0; i <n;++i){
            if(has.find(target-nums[i]) != has.end()){
                return {has[target-nums[i]],i};
            }
            has[nums[i]]=i;
        }
     return {};
    }
};
```

```c++
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> has;
        for (int i = 0; i < nums.size(); ++i) {
            auto it = has.find(target - nums[i]);
            if (it != hashtable.end()) {
                return {it->second, i};
            }
            hashtable[nums[i]] = i;
        }
        return {};
    }
};
```

***

### 分析代码

***

#### 前置任务

作为摆烂人我都不知道`vector`什么意思，憋说`unordered_map`了。秉承着面向CSDN编程的核心思想，找到点资源，读了一下。

#### vector

用法较多，当前只写几个简单的，详细可到下面链接去

```c++
#include<vector>  // 引入库

int b[7]={1,2,3,4,5,9,8};
        vector<int> a(b,b+7); //从数组中获得初值 int表示vector中的数据类型

vector<int> b(a) 	//拷贝a到b 
    
vector<int> c(10,1); //定义了10个整型元素的向量,且给出每个元素的初值为1
```

例程中的vector

```c++
 vector<int> twoSum(vector<int>& nums, int target)
     // 第一个vector是声明函数返回值类型
     // 第二个vector创建一维vector变量nums，此时的nums是vector对象
     // 相当于一个数组（实际上是向量），依然可以使用下标取值
```

#### unordered_map

##### 介绍

unordered_map它是一个关联容器，内部采用的是hash表结构，拥有快速检索的功能。

##### 特性简述

1. 通过哈希表存储，时间复杂度为O(1)
2. 键值对，key去检索value

```c++
unordered_map <int ,int> has;  // 声明unordered_map类的对象has
							   //  <int,int>表示key，value的数据类型
```

##### 上述代码出现的用法/函数

- `has.find(target-nums[i])`

```
iterator find ( const key_type& k );    
// 查找key所在的元素。
// - 找到：返回元素的迭代器。通过迭代器的second属性获取值
// - 没找到：返回unordered_map::end
```

- `has.end()`

```c++
iterator end() noexcept;
// end(): 返回结束位置的迭代器

local_iterator end( size_type n );
// end(int n) : 返回n号bucket的最后一个迭代器
```

##### 解析

```c++
for(int i =0; i <n;++i){
            if(has.find(target-nums[i]) != has.end()){
                return {has[target-nums[i]],i};
            }
            has[nums[i]]=i;  // has[key] = value;
        }
// 使用has.find(target-num[i]) != has.end()来寻找是否存在元素target-num[i]
// has[nums[i]] = i 用来把nums里面的值依次存储
```

PS：看了老半天没看明白这个`nums`里面的的数据怎么通过`unordered_mao`调用的，才发现后面有一句`has[nums[i]] = i`。大本钟下面寄快递——上面摆下面寄

![image]({{ site.baseurl }}\images\2022041602.jpg)

#### 总结

比起解决这个题目，更像是了解一下`vector`和`unordered_map`，毕竟我也不会捏。

#### 参考

[C++ vector的用法（整理）](https://blog.csdn.net/wkq0825/article/details/82255984?ops_request_misc=%7B%22request%5Fid%22%3A%22165008275516780255296482%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&request_id=165008275516780255296482&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-82255984.142^v9^pc_search_result_cache,157^v4^control&utm_term=vector&spm=1018.2226.3001.4187)，[unordered_map详细介绍](https://blog.csdn.net/lizhengze1117/article/details/96728468?ops_request_misc=%7B%22request%5Fid%22%3A%22165008265416780255233400%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&request_id=165008265416780255233400&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-96728468.142^v9^pc_search_result_cache,157^v4^control&utm_term=unordered_map&spm=1018.2226.3001.4187)，[两数之和提交记录情况](https://leetcode-cn.com/submissions/detail/300893887/)